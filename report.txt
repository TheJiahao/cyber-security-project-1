Link to repository: https://github.com/TheJiahao/cyber-security-project-1
Installation (see README.md for better formatting):
- Install Node LTS v20.17.0 or newer (probably works) with a package manager (Homebrew (Mac), apt (Linux/Ubuntu), scoop (Windows), etc.) or download and use the installer from https://nodejs.org
  For apt in Ubuntu, run:
    sudo apt install nodejs
- Install pnpm with corepack or any method listed in https://pnpm.io/installation
  With corepack (shipped with Node) run:
    sudo corepack corepack enable
- Install dependencies:
    pnpm install
- Clone the repository:
    git clone git@github.com:TheJiahao/cyber-security-project-1.git

Running the application:
- Initialize database:
    pnpm run init:db
- Run the server:
    pnpm run dev

The flaws are from OWASP top ten list 2021.

The application lists all users with link to their profile page in home page http://127.0.0.1:3006 (by default).
To login or register, click the links in the navigation bar.
The attacks in the essay assumes that there is a user with username and passwords admin:admin. Before trying to make the attacks in the essay, register a user with such credentials.

A01:2021 – Broken Access Control:
https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/controllers/profileController.ts#L36
The API route that handles user description modification does not verify the identity of user.
To exploit the flaw, send the following HTTP POST request (without cookies):
POST http://127.0.0.1:3006/user/admin HTTP/1.1
Content-Type: application/json

{
    "description": "<script>alert('this is also an XSS attack')</script>"
}

To fix it, check that there is a JSON Web Token (JWT) in the cookies and check that the user has access to modify description.
The fix is commented in the source: https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/controllers/profileController.ts#L36

A02:2021 – Cryptographic Failures:
Passwords and tokens are transmitted over HTTP in clear text.
Therefore a man-in-the-middle attack is possible. Practically, capture traffic between your computer and the server with Wireshark or something similar.
To fix it, get a TLS/SSL certificate and configure HTTPS using it for the server to transmit encrypted passwords and tokens.

A03:2021 – Injection:
https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/views/profilePage.ejs#L9
The user profile page displays user-submitted description as raw HTML which is vulnerable to cross-site scripting (XSS).
The make an attack, register a user and set description to "<script>alert('this is XSS attack')</script>".
Combined with the broken access control vulnerability described previously, the attacker can run the script on every user's profile page.

To fix it, escape dangerous symbols, such as "<" and ">", in the user input before storing into database and before sending it to an user.
In this project the latter fix (the template engine provides it) is in: https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/views/profilePage.ejs#L10
The former fix requires trying different packages (can be found with keyword "sanitize") and is therefore omitted here.

A07:2021 – Identification and Authentication Failures:
https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/controllers/registerController.ts#L21
https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/controllers/loginController.ts#L21
Passwords are stored as clear text. Utilising this in an attack does not require access to the database file in the server, due to the flaw A04:2021 described below.
However, the authentication requests have no rate limits. Therefore brute force attack, i.e. trying common or weak passwords with a script, is possible.

The following bcrypt-based fix fixes both problems. To fix the clear text problem, store only hashed version of passwords. For example, use bcrypt to hash the password.
The password hashing fix: https://github.com/TheJiahao/cyber-security-project-1/blob/14cc49e22713d635be88167d3f87eece3aefee0e/src/controllers/registerController.ts#L40
To prevent brute force attacks, use a slow hash function, such as bcrypt, in authentication.
The bcrypt can be configured to run slow, such as 200 ms each time, for automated attack but fast enough for real users.
The slow hash comparison fix: https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/controllers/loginController.ts#L26

A05:2021 – Security Misconfiguration:
https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/config.ts#L2
The secret key (1234) used for signing JWT and cookies is too weak and hard coded as clear text in config file.
The following example attack is slightly complicated but possible to be done automatically.
1. Register an user and get the token from the server response or read it from cookies.
2. Decode the token, for example with https://10015.io/tools/jwt-encoder-decoder
3. Check the payload format and algorithm.
5. Change the username field to another user's and encode it with the known secret key and algorithm.
6. Replace the token in cookies with the fake token.
7. Now, the access of another user is gained.
If the secret key is only known to be weak but not exactly, then the repeat steps from 5. automatically with a script until the key is spotted.
The server has no rate limits as previously described, so brute force attacks like this is also possible.

Since the secret key is known, the expiration time of a token can also be manipulated. Therefore changing it does not fix the problem.
To fix the problem, load the secret key from environment variables and use a more difficult key.
Fix: https://github.com/TheJiahao/cyber-security-project-1/blob/1433f4e50860a24c7f72156ba96bb665a33657e4/src/config.ts#L5

A04:2021 – Insecure Design
https://github.com/TheJiahao/cyber-security-project-1/blob/14cc49e22713d635be88167d3f87eece3aefee0e/src/controllers/registerController.ts#L26
The server sends raw user object from database query within error message if registration failed.
The object contains password in clear text due to the previously described flaw A07:2021.
To exploit the flaw, select a victim from user list in home page and try to register with its username.
To fix the problem, remove dynamic part, the user object from database query, from error message for failed registration.
The fix: https://github.com/TheJiahao/cyber-security-project-1/blob/14cc49e22713d635be88167d3f87eece3aefee0e/src/controllers/registerController.ts#L27
